Maybe manage RigidBodyRef in HOC and provide a position function that tries rigid then mesh
Use React's useMemo and useCallback to memoize complex calculations and functions that don't need to be re-created on every render.
Move to using Motion for Canvas and Camera control ?
WDS_SOCKET_PORT=0 only in CodeSpace ?
The AnimationMixer in Three.js provides a robust and flexible way to handle animations
Entity-Component-System (ECS) is an architectural pattern often used in game development. Entity: A unique identifier representing an object. Component: Holds data attributes for an entity (e.g., position, velocity). System: Contains logic to process entities with specific components (e.g., movement, rendering).

We are likely to hit performance issues so moving to 2D may be better e.g. pixi.js with planck-js This leaves an issue regarding how to have intersecting planes. plank-js seemed to run into issues with 1000s of objects. https://github.com/liabru/matter-js might be better ? https://github.com/liabru/matter-attractors

Calling a Physics function through animation controller:
[1, 'emergent1.Sphere1', { action: { name: 'applyImpulse', params: [{ x: 10, y: 5, z: 0 }] } }],

Pass down a ref to runtimeConfig ?

Below a certain scale joints could become fixed and merge into a single collider (capsule) the intermediate joints can be ignored
Why can joints have large gaps appear due to forces

The entities form a new internal boundary as well as an external boundary. Could argue that the internal boundary if "sheltered" from direct external influecne

https://blog.maximeheckel.com/posts/the-magical-world-of-particles-with-react-three-fiber-and-shaders/